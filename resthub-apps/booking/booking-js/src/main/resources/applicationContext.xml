<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
	xmlns:mvc="http://www.springframework.org/schema/mvc">
    
	<context:annotation-config />
	<context:component-scan base-package="org.resthub.booking.security" />
	
	<mvc:default-servlet-handler />
	
	<security:authentication-manager>
		<security:authentication-provider user-service-ref="bookingUserDetailsService"/>
	</security:authentication-manager>
	
	
	
	<security:http pattern="/oauth/token" create-session="never" authentication-manager-ref="clientAuthenticationManager">
		<security:intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
		<security:anonymous enabled="false" />
		<security:http-basic />
		<!-- include this only if you need to authenticate clients via request parameters -->
		<security:custom-filter ref="clientCredentialsTokenEndpointFilter" before="BASIC_AUTH_FILTER" />
	</security:http>
	
	<security:http entry-point-ref="oauth2ProcessingFilterEntryPoint" create-session="never">
		<security:intercept-url pattern="/api/lucene/rebuild" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<security:intercept-url pattern="/api/user/**" method="POST" access="IS_AUTHENTICATED_ANONYMOUSLY" />
        <security:intercept-url pattern="/api/**" access="ROLE_AUTH" />
        <security:intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<security:intercept-url pattern="/oauth/authorize" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<security:intercept-url pattern="/oauth/**" access="ROLE_USER" />
		<security:access-denied-handler ref="oauth2AccessDeniedHandler" />
		<security:custom-filter ref="resourceServerFilter" before="EXCEPTION_TRANSLATION_FILTER" />
	</security:http>
	
	<bean id="clientCredentialsTokenEndpointFilter" class="org.springframework.security.oauth2.provider.filter.ClientCredentialsTokenEndpointFilter">
		<property name="authenticationManager" ref="clientAuthenticationManager" />
	</bean>
	
	<authentication-manager id="clientAuthenticationManager" xmlns="http://www.springframework.org/schema/security">
		<authentication-provider user-service-ref="clientDetailsUserService" />
	</authentication-manager>
	
	<bean id="clientDetailsUserService" class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
		<constructor-arg ref="clientDetails" />
	</bean>
	
	<bean id="oauth2AccessDeniedHandler" class="org.springframework.security.web.access.AccessDeniedHandlerImpl"/>	
		
	<oauth2:client-details-service id="clientDetails" >
		<oauth2:client client-id="booking" resource-ids="resthub" authorized-grant-types="password" />
	</oauth2:client-details-service>	
	
	<bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.RandomValueTokenServices">
		<property name="tokenStore">
			<bean class="org.springframework.security.oauth2.provider.token.InMemoryTokenStore" />
		</property>
		<property name="supportRefreshToken" value="false" />
	</bean>
	
	<oauth2:resource-server id="resourceServerFilter" resource-id="resthub" token-services-ref="tokenServices" />
	
	<oauth2:authorization-server client-details-service-ref="clientDetails" token-services-ref="tokenServices">
		<oauth2:password />
	</oauth2:authorization-server>
	
</beans>
